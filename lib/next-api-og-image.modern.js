import{renderToStaticMarkup as e}from"react-dom/server";import t from"deepmerge";import r from"twemoji";import o from"puppeteer-core";import n from"chrome-aws-lambda";function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o])}return e},a.apply(this,arguments)}const s=["body","query"];function i(o){o=t({contentType:"image/png",strategy:"query",cacheControl:"max-age 3600, must-revalidate",dev:{inspectHtml:!0,errorsInResponse:!0}},o);const{template:{html:n,react:i},cacheControl:u,strategy:l,contentType:d,dev:{inspectHtml:g,errorsInResponse:h}}=o;if(n&&i)throw new Error("Ambigious template provided. You must provide either `html` or `react` template.");if(!n&&!i)throw new Error("No template was provided.");const y=process.env.NODE_ENV,w=function(...e){return async function(){return await e.reduce(async(e,t)=>await t(await e),Promise.resolve({envMode:process.env.NODE_ENV}))}}(p,m,function(e){return function(t){const{page:r,envMode:o}=t;return a({},t,{createImage:async function(t){return await r.setContent(t),!c(o)&&e?await r.content():await r.screenshot({type:"png",encoding:"binary"})}})}}(g));return async function(t,o){!function(e,t,r,o){const n={body:()=>{const{method:e,headers:{"content-type":n}}=r;if("POST"!==e&&"application/json"!==n){const r=`Strategy is set to \`body\` so parameters must be passed by POST request and JSON payload. Current method: ${e} and current content type: ${n}`;throw t&&o.json({message:r}),new Error(r)}},query:()=>{const{method:e}=r;if("GET"!==e){const r=`Strategy is set to \`query\` so parameters must be passed by GET request and query params. Current method: ${e}`;throw t&&o.json({message:r}),new Error(r)}}},a=n[e];if(!a)throw new Error(`Unknown strategy provided. Possible values: ${s}`);a()}(l,!c(y)&&h,t,o);const p=JSON.parse(JSON.stringify("query"===l?t.query:t.body,(e,t)=>t&&"object"==typeof t?t:`${t}`)),m=await w(),f=n&&!i?await n(a({},p)):e(await i(a({},p)));o.setHeader("Content-Type",!c(y)&&g?"text/html":d),o.setHeader("Cache-Control",u),o.write(await m.createImage(function(e){return`<style>\n    .emoji {\n      height: 1em;\n      width: 1em;\n      margin: 0 .05em 0 .1em;\n      vertical-align: -0.1em;\n    }\n  </style>${r.parse(e,{folder:"svg",ext:".svg"})}`}(f))),o.end()}}function c(e){return"production"===e||"staging"===e}function p(e){return a({},e,{executable:"win32"===process.platform?"C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe":"linux"===process.platform?"/usr/bin/google-chrome":"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"})}async function m(e){const{page:t,envMode:r,executable:s}=e;if(t)return a({},e,{page:t});const i=c(r)?{args:n.args,executablePath:await n.executablePath,headless:n.headless}:{args:[],executablePath:s,headless:!0},p=await o.launch(i),m=await p.newPage();return await m.setViewport({width:1200,height:630}),a({},e,{page:m})}export{i as withOGImage};
//# sourceMappingURL=next-api-og-image.modern.js.map

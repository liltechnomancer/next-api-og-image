{"version":3,"file":"next-api-og-image.umd.js","sources":["../src/index.ts"],"sourcesContent":["import type { NextApiRequest, NextApiResponse } from 'next'\r\nimport type { Except, RequireExactlyOne } from 'type-fest'\r\nimport type { Page } from 'puppeteer-core'\r\nimport type { ReactElement } from 'react'\r\nimport { renderToStaticMarkup } from 'react-dom/server'\r\nimport deepMerge from 'deepmerge'\r\nimport twemoji from 'twemoji'\r\nimport core from 'puppeteer-core'\r\nimport chrome from 'chrome-aws-lambda'\r\n\r\nconst STRATEGY_OPTIONS = ['body', 'query'] as const\r\ntype StrategyOption = typeof STRATEGY_OPTIONS[number]\r\n\r\nconst ENV_MODES = ['development', 'staging', 'production', 'testing'] as const\r\ntype EnvMode = typeof ENV_MODES[number]\r\n\r\ntype StrategyAwareParams<\r\n  T extends StrategyOption = 'query',\r\n  StrategyDetails extends string | object = string,\r\n> = T extends 'body'\r\n  ? StrategyDetails\r\n  : Record<StrategyDetails extends string ? StrategyDetails : string, NonNullable<string>>\r\n\r\nexport type NextApiOgImageConfig<\r\n  Strategy extends StrategyOption,\r\n  StrategyDetails extends string | object = string,\r\n> = {\r\n  template: RequireExactlyOne<\r\n    Partial<{\r\n      html: (params: StrategyAwareParams<Strategy, StrategyDetails>) => string | Promise<string>\r\n      react: (params: StrategyAwareParams<Strategy, StrategyDetails>) => ReactElement | Promise<ReactElement>\r\n    }>,\r\n    'html' | 'react'\r\n  >\r\n  strategy?: StrategyOption\r\n  contentType?: string\r\n  cacheControl?: string\r\n  dev?: Partial<{\r\n    inspectHtml: boolean\r\n    errorsInResponse: boolean\r\n  }>\r\n}\r\n\r\ntype BrowserEnvironment = {\r\n  envMode: EnvMode\r\n  executable: string\r\n  page: Page\r\n  createImage: (html: string) => Promise<Buffer> | Promise<string>\r\n}\r\n\r\nexport function withOGImage<\r\n  Strategy extends StrategyOption = 'query',\r\n  StrategyDetails extends string | object = string,\r\n>(options: NextApiOgImageConfig<Strategy, StrategyDetails>) {\r\n  const defaultOptions: Except<NextApiOgImageConfig<Strategy, StrategyDetails>, 'template'> = {\r\n    contentType: 'image/png',\r\n    strategy: 'query',\r\n    cacheControl: 'max-age 3600, must-revalidate',\r\n    dev: {\r\n      inspectHtml: true,\r\n      errorsInResponse: true,\r\n    },\r\n  }\r\n\r\n  options = deepMerge(defaultOptions, options) as NextApiOgImageConfig<Strategy, StrategyDetails>\r\n\r\n  const {\r\n    template: { html: htmlTemplate, react: reactTemplate },\r\n    cacheControl,\r\n    strategy,\r\n    contentType,\r\n    dev: { inspectHtml, errorsInResponse },\r\n  } = options\r\n\r\n  if (htmlTemplate && reactTemplate) {\r\n    throw new Error('Ambigious template provided. You must provide either `html` or `react` template.')\r\n  }\r\n\r\n  if (!htmlTemplate && !reactTemplate) {\r\n    throw new Error('No template was provided.')\r\n  }\r\n\r\n  const envMode = process.env.NODE_ENV as EnvMode\r\n\r\n  const createBrowserEnvironment = pipe(\r\n    getChromiumExecutable,\r\n    prepareWebPage,\r\n    createImageFactory(inspectHtml),\r\n  )\r\n\r\n  return async function (request: NextApiRequest, response: NextApiResponse) {\r\n    checkStrategy(strategy, !isProductionLikeMode(envMode) ? errorsInResponse : false, request, response)\r\n\r\n    const params = stringifyObjectProps(strategy === 'query' ? request.query : request.body)\r\n    const browserEnvironment = await createBrowserEnvironment()\r\n\r\n    const html =\r\n      htmlTemplate && !reactTemplate\r\n        ? await htmlTemplate({ ...params } as StrategyAwareParams<Strategy, StrategyDetails>)\r\n        : renderToStaticMarkup(\r\n            await reactTemplate({ ...params } as StrategyAwareParams<Strategy, StrategyDetails>),\r\n          )\r\n\r\n    response.setHeader(\r\n      'Content-Type',\r\n      !isProductionLikeMode(envMode) && inspectHtml ? 'text/html' : contentType,\r\n    )\r\n    response.setHeader('Cache-Control', cacheControl)\r\n\r\n    response.write(await browserEnvironment.createImage(emojify(html)))\r\n    response.end()\r\n  }\r\n}\r\n\r\nfunction isProductionLikeMode(envMode: EnvMode) {\r\n  return envMode === 'production' || envMode === 'staging'\r\n}\r\n\r\nfunction checkStrategy(\r\n  strategy: StrategyOption,\r\n  errorsInResponse: boolean,\r\n  request: NextApiRequest,\r\n  response: NextApiResponse,\r\n) {\r\n  const checks: Record<StrategyOption, () => void> = {\r\n    body: () => {\r\n      const {\r\n        method,\r\n        headers: { 'content-type': contentType },\r\n      } = request\r\n\r\n      if (method !== 'POST' && contentType !== 'application/json') {\r\n        const message = `Strategy is set to \\`body\\` so parameters must be passed by POST request and JSON payload. Current method: ${method} and current content type: ${contentType}`\r\n\r\n        if (errorsInResponse) {\r\n          response.json({ message })\r\n        }\r\n\r\n        throw new Error(message)\r\n      }\r\n    },\r\n    query: () => {\r\n      const { method } = request\r\n\r\n      if (method !== 'GET') {\r\n        const message = `Strategy is set to \\`query\\` so parameters must be passed by GET request and query params. Current method: ${method}`\r\n\r\n        if (errorsInResponse) {\r\n          response.json({ message })\r\n        }\r\n\r\n        throw new Error(message)\r\n      }\r\n    },\r\n  }\r\n  const currentCheck = checks[strategy]\r\n\r\n  if (!currentCheck) {\r\n    throw new Error(`Unknown strategy provided. Possible values: ${STRATEGY_OPTIONS}`)\r\n  }\r\n\r\n  currentCheck()\r\n}\r\n\r\nfunction stringifyObjectProps(object: object) {\r\n  return JSON.parse(\r\n    JSON.stringify(object, (key, value) => (value && typeof value === 'object' ? value : `${value}`)),\r\n  )\r\n}\r\n\r\nfunction emojify(html: string) {\r\n  const emojified = twemoji.parse(html, { folder: 'svg', ext: '.svg' })\r\n\r\n  const emojiStyle = `\r\n    .emoji {\r\n      height: 1em;\r\n      width: 1em;\r\n      margin: 0 .05em 0 .1em;\r\n      vertical-align: -0.1em;\r\n    }\r\n  `\r\n\r\n  return `<style>${emojiStyle}</style>${emojified}`\r\n}\r\n\r\nfunction pipe(...functions: Array<Function>): () => Promise<BrowserEnvironment> {\r\n  return async function () {\r\n    return await functions.reduce(\r\n      async (acc, fn) => await fn(await acc),\r\n      Promise.resolve({ envMode: process.env.NODE_ENV as EnvMode } as BrowserEnvironment),\r\n    )\r\n  }\r\n}\r\n\r\nfunction getChromiumExecutable(browserEnvironment: BrowserEnvironment) {\r\n  const executable =\r\n    process.platform === 'win32'\r\n      ? 'C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe'\r\n      : process.platform === 'linux'\r\n      ? '/usr/bin/google-chrome'\r\n      : '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'\r\n\r\n  return { ...browserEnvironment, executable }\r\n}\r\n\r\nasync function prepareWebPage(browserEnvironment: BrowserEnvironment) {\r\n  const { page, envMode, executable } = browserEnvironment\r\n\r\n  if (page) {\r\n    return { ...browserEnvironment, page }\r\n  }\r\n\r\n  const chromiumOptions = !isProductionLikeMode(envMode)\r\n    ? { args: [], executablePath: executable, headless: true }\r\n    : {\r\n        args: chrome.args,\r\n        executablePath: await chrome.executablePath,\r\n        headless: chrome.headless,\r\n      }\r\n\r\n  const browser = await core.launch(chromiumOptions)\r\n  const newPage = await browser.newPage()\r\n  await newPage.setViewport({ width: 1200, height: 630 })\r\n\r\n  return { ...browserEnvironment, page: newPage }\r\n}\r\n\r\nfunction createImageFactory(inspectHtml: boolean) {\r\n  return function (browserEnvironment: BrowserEnvironment) {\r\n    const { page, envMode } = browserEnvironment\r\n\r\n    return {\r\n      ...browserEnvironment,\r\n      createImage: async function (html: string) {\r\n        await page.setContent(html)\r\n        const file =\r\n          !isProductionLikeMode(envMode) && inspectHtml\r\n            ? await page.content()\r\n            : await page.screenshot({ type: 'png', encoding: 'binary' })\r\n        return file\r\n      },\r\n    }\r\n  }\r\n}\r\n"],"names":["prepareWebPage","browserEnvironment","core","launch","_isProductionLikeMode2","args","executablePath","headless","chrome","browser","newPage","setViewport","width","height","page","envMode","executable","isProductionLikeMode","STRATEGY_OPTIONS","getChromiumExecutable","process","platform","options","deepMerge","contentType","strategy","cacheControl","dev","inspectHtml","errorsInResponse","template","htmlTemplate","html","reactTemplate","react","Error","env","NODE_ENV","createBrowserEnvironment","functions","reduce","acc","fn","Promise","resolve","pipe","createImage","setContent","content","screenshot","type","encoding","createImageFactory","request","response","checks","body","method","headers","message","json","query","currentCheck","checkStrategy","params","JSON","parse","stringify","key","value","renderToStaticMarkup","setHeader","write","twemoji","folder","ext","emojify","_write","end"],"mappings":"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"}
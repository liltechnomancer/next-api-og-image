{"version":3,"file":"next-api-og-image.modern.js","sources":["../src/index.ts"],"sourcesContent":["import type { NextApiRequest, NextApiResponse } from 'next'\r\nimport type { Except, RequireExactlyOne } from 'type-fest'\r\nimport type { Page } from 'puppeteer-core'\r\nimport type { ReactElement } from 'react'\r\nimport { renderToStaticMarkup } from 'react-dom/server'\r\nimport deepMerge from 'deepmerge'\r\nimport twemoji from 'twemoji'\r\nimport core from 'puppeteer-core'\r\nimport chrome from 'chrome-aws-lambda'\r\n\r\nconst STRATEGY_OPTIONS = ['body', 'query'] as const\r\ntype StrategyOption = typeof STRATEGY_OPTIONS[number]\r\n\r\nconst ENV_MODES = ['development', 'staging', 'production', 'testing'] as const\r\ntype EnvMode = typeof ENV_MODES[number]\r\n\r\ntype StrategyAwareParams<\r\n  T extends StrategyOption = 'query',\r\n  StrategyDetails extends string | object = string,\r\n> = T extends 'body'\r\n  ? StrategyDetails\r\n  : Record<StrategyDetails extends string ? StrategyDetails : string, NonNullable<string>>\r\n\r\nexport type NextApiOgImageConfig<\r\n  Strategy extends StrategyOption,\r\n  StrategyDetails extends string | object = string,\r\n> = {\r\n  template: RequireExactlyOne<\r\n    Partial<{\r\n      html: (params: StrategyAwareParams<Strategy, StrategyDetails>) => string | Promise<string>\r\n      react: (params: StrategyAwareParams<Strategy, StrategyDetails>) => ReactElement | Promise<ReactElement>\r\n    }>,\r\n    'html' | 'react'\r\n  >\r\n  strategy?: StrategyOption\r\n  contentType?: string\r\n  cacheControl?: string\r\n  dev?: Partial<{\r\n    inspectHtml: boolean\r\n    errorsInResponse: boolean\r\n  }>\r\n}\r\n\r\ntype BrowserEnvironment = {\r\n  envMode: EnvMode\r\n  executable: string\r\n  page: Page\r\n  createImage: (html: string) => Promise<Buffer> | Promise<string>\r\n}\r\n\r\nexport function withOGImage<\r\n  Strategy extends StrategyOption = 'query',\r\n  StrategyDetails extends string | object = string,\r\n>(options: NextApiOgImageConfig<Strategy, StrategyDetails>) {\r\n  const defaultOptions: Except<NextApiOgImageConfig<Strategy, StrategyDetails>, 'template'> = {\r\n    contentType: 'image/png',\r\n    strategy: 'query',\r\n    cacheControl: 'max-age 3600, must-revalidate',\r\n    dev: {\r\n      inspectHtml: true,\r\n      errorsInResponse: true,\r\n    },\r\n  }\r\n\r\n  options = deepMerge(defaultOptions, options) as NextApiOgImageConfig<Strategy, StrategyDetails>\r\n\r\n  const {\r\n    template: { html: htmlTemplate, react: reactTemplate },\r\n    cacheControl,\r\n    strategy,\r\n    contentType,\r\n    dev: { inspectHtml, errorsInResponse },\r\n  } = options\r\n\r\n  if (htmlTemplate && reactTemplate) {\r\n    throw new Error('Ambigious template provided. You must provide either `html` or `react` template.')\r\n  }\r\n\r\n  if (!htmlTemplate && !reactTemplate) {\r\n    throw new Error('No template was provided.')\r\n  }\r\n\r\n  const envMode = process.env.NODE_ENV as EnvMode\r\n\r\n  const createBrowserEnvironment = pipe(\r\n    getChromiumExecutable,\r\n    prepareWebPage,\r\n    createImageFactory(inspectHtml),\r\n  )\r\n\r\n  return async function (request: NextApiRequest, response: NextApiResponse) {\r\n    checkStrategy(strategy, !isProductionLikeMode(envMode) ? errorsInResponse : false, request, response)\r\n\r\n    const params = stringifyObjectProps(strategy === 'query' ? request.query : request.body)\r\n    const browserEnvironment = await createBrowserEnvironment()\r\n\r\n    const html =\r\n      htmlTemplate && !reactTemplate\r\n        ? await htmlTemplate({ ...params } as StrategyAwareParams<Strategy, StrategyDetails>)\r\n        : renderToStaticMarkup(\r\n            await reactTemplate({ ...params } as StrategyAwareParams<Strategy, StrategyDetails>),\r\n          )\r\n\r\n    response.setHeader(\r\n      'Content-Type',\r\n      !isProductionLikeMode(envMode) && inspectHtml ? 'text/html' : contentType,\r\n    )\r\n    response.setHeader('Cache-Control', cacheControl)\r\n\r\n    response.write(await browserEnvironment.createImage(emojify(html)))\r\n    response.end()\r\n  }\r\n}\r\n\r\nfunction isProductionLikeMode(envMode: EnvMode) {\r\n  return envMode === 'production' || envMode === 'staging'\r\n}\r\n\r\nfunction checkStrategy(\r\n  strategy: StrategyOption,\r\n  errorsInResponse: boolean,\r\n  request: NextApiRequest,\r\n  response: NextApiResponse,\r\n) {\r\n  const checks: Record<StrategyOption, () => void> = {\r\n    body: () => {\r\n      const {\r\n        method,\r\n        headers: { 'content-type': contentType },\r\n      } = request\r\n\r\n      if (method !== 'POST' && contentType !== 'application/json') {\r\n        const message = `Strategy is set to \\`body\\` so parameters must be passed by POST request and JSON payload. Current method: ${method} and current content type: ${contentType}`\r\n\r\n        if (errorsInResponse) {\r\n          response.json({ message })\r\n        }\r\n\r\n        throw new Error(message)\r\n      }\r\n    },\r\n    query: () => {\r\n      const { method } = request\r\n\r\n      if (method !== 'GET') {\r\n        const message = `Strategy is set to \\`query\\` so parameters must be passed by GET request and query params. Current method: ${method}`\r\n\r\n        if (errorsInResponse) {\r\n          response.json({ message })\r\n        }\r\n\r\n        throw new Error(message)\r\n      }\r\n    },\r\n  }\r\n  const currentCheck = checks[strategy]\r\n\r\n  if (!currentCheck) {\r\n    throw new Error(`Unknown strategy provided. Possible values: ${STRATEGY_OPTIONS}`)\r\n  }\r\n\r\n  currentCheck()\r\n}\r\n\r\nfunction stringifyObjectProps(object: object) {\r\n  return JSON.parse(\r\n    JSON.stringify(object, (key, value) => (value && typeof value === 'object' ? value : `${value}`)),\r\n  )\r\n}\r\n\r\nfunction emojify(html: string) {\r\n  const emojified = twemoji.parse(html, { folder: 'svg', ext: '.svg' })\r\n\r\n  const emojiStyle = `\r\n    .emoji {\r\n      height: 1em;\r\n      width: 1em;\r\n      margin: 0 .05em 0 .1em;\r\n      vertical-align: -0.1em;\r\n    }\r\n  `\r\n\r\n  return `<style>${emojiStyle}</style>${emojified}`\r\n}\r\n\r\nfunction pipe(...functions: Array<Function>): () => Promise<BrowserEnvironment> {\r\n  return async function () {\r\n    return await functions.reduce(\r\n      async (acc, fn) => await fn(await acc),\r\n      Promise.resolve({ envMode: process.env.NODE_ENV as EnvMode } as BrowserEnvironment),\r\n    )\r\n  }\r\n}\r\n\r\nfunction getChromiumExecutable(browserEnvironment: BrowserEnvironment) {\r\n  const executable =\r\n    process.platform === 'win32'\r\n      ? 'C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe'\r\n      : process.platform === 'linux'\r\n      ? '/usr/bin/google-chrome'\r\n      : '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'\r\n\r\n  return { ...browserEnvironment, executable }\r\n}\r\n\r\nasync function prepareWebPage(browserEnvironment: BrowserEnvironment) {\r\n  const { page, envMode, executable } = browserEnvironment\r\n\r\n  if (page) {\r\n    return { ...browserEnvironment, page }\r\n  }\r\n\r\n  const chromiumOptions = !isProductionLikeMode(envMode)\r\n    ? { args: [], executablePath: executable, headless: true }\r\n    : {\r\n        args: chrome.args,\r\n        executablePath: await chrome.executablePath,\r\n        headless: chrome.headless,\r\n      }\r\n\r\n  const browser = await core.launch(chromiumOptions)\r\n  const newPage = await browser.newPage()\r\n  await newPage.setViewport({ width: 1200, height: 630 })\r\n\r\n  return { ...browserEnvironment, page: newPage }\r\n}\r\n\r\nfunction createImageFactory(inspectHtml: boolean) {\r\n  return function (browserEnvironment: BrowserEnvironment) {\r\n    const { page, envMode } = browserEnvironment\r\n\r\n    return {\r\n      ...browserEnvironment,\r\n      createImage: async function (html: string) {\r\n        await page.setContent(html)\r\n        const file =\r\n          !isProductionLikeMode(envMode) && inspectHtml\r\n            ? await page.content()\r\n            : await page.screenshot({ type: 'png', encoding: 'binary' })\r\n        return file\r\n      },\r\n    }\r\n  }\r\n}\r\n"],"names":["STRATEGY_OPTIONS","withOGImage","options","deepMerge","contentType","strategy","cacheControl","dev","inspectHtml","errorsInResponse","template","html","htmlTemplate","react","reactTemplate","Error","envMode","process","env","NODE_ENV","createBrowserEnvironment","functions","reduce","async","acc","fn","Promise","resolve","pipe","getChromiumExecutable","prepareWebPage","browserEnvironment","page","createImage","setContent","isProductionLikeMode","content","screenshot","type","encoding","createImageFactory","request","response","checks","body","method","headers","message","json","query","currentCheck","checkStrategy","params","JSON","parse","stringify","key","value","renderToStaticMarkup","setHeader","write","twemoji","folder","ext","emojify","end","executable","platform","chromiumOptions","args","chrome","executablePath","headless","browser","core","launch","newPage","setViewport","width","height"],"mappings":"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"}